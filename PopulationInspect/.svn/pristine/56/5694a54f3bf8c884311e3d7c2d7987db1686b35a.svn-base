package edu.hdu.lab.checkIn.controllers;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import edu.hdu.lab.checkIn.dto.PoliceBasic;
import edu.hdu.lab.checkIn.mapper.BuildingMapper;
import edu.hdu.lab.checkIn.mapper.CommunityMapper;
import edu.hdu.lab.checkIn.mapper.PoliceMapper;
import edu.hdu.lab.checkIn.mapper.RoomMapper;
import edu.hdu.lab.checkIn.model.Building;
import edu.hdu.lab.checkIn.model.BuildingExample;
import edu.hdu.lab.checkIn.model.CommunityExample;
import edu.hdu.lab.checkIn.model.Police;
import edu.hdu.lab.checkIn.model.PoliceExample;
import edu.hdu.lab.checkIn.model.RoomExample;
import edu.hdu.lab.checkIn.services.PoliceService;
import edu.hdu.lab.checkIn.utils.JsonUtils;

@Controller
public class PoliceController {

	private Logger logger = Logger.getLogger(getClass());

	@Autowired
	private PoliceService policeService;

	@Autowired
	private PoliceMapper policeMapper;

	@Autowired
	private CommunityMapper communityMapper;

	@Autowired
	private BuildingMapper buildingMapper;

	@Autowired
	private RoomMapper roomMapper;

	@ResponseBody
	@RequestMapping(value = "/police/login", method = RequestMethod.POST, produces = "text/html;charset=UTF-8")
	public String authorize(@RequestParam("poli_code") String poli_code,
			@RequestParam("poli_pwd") String poli_pwd,
			@RequestParam("ip") String ip, HttpServletRequest request) {
		poli_code = poli_code.trim();
		poli_pwd = poli_pwd.trim();
		ip = ip.trim();
		List<PoliceBasic> police = policeService.getPolice(poli_code);
		int resultCode = 0;
		Map<String, Object> resultMap = new HashMap<String, Object>(2);
		if (police != null && police.size() == 1) {
			if (police.get(0).getPoliPass().equals(poli_pwd)) {
				if (police.get(0).getIsDeleted() == false) {
					Police police2 = new Police();
					police2.setPoliId(police.get(0).getPoliId());
					police2.setIpLastlogin(ip);
					police2.setTimeLastlogin(new Date());
					int updatePolice = policeService.updatePolice(police2);
					if (updatePolice == 1) {
						resultCode = 1;
						resultMap.put("police", police.get(0));
					} else {
						resultCode = 4;
					}
				} else {
					resultCode = 3;
				}
			} else {
				resultCode = 2;
			}
		}
		resultMap.put("resultCode", resultCode);
		return JsonUtils.createGson().toJson(resultMap);
	}

	@ResponseBody
	@RequestMapping(value = "/police/getOvernumber", method = RequestMethod.POST, produces = "text/html;charset=UTF-8")
	public String getOvernumber(HttpServletRequest request) {
		return JsonUtils.createGson().toJson(policeMapper.getOverData(1));
	}

	// 一般警员生成树#
	@ResponseBody
	@RequestMapping(value = "/police/getCommunityByPoliId", method = RequestMethod.POST, produces = "text/html;charset=UTF-8")
	public String getCommunitybyPoliid(@RequestParam("poli_id") Integer poli_id,HttpServletRequest request) {
		Map<String, Object> resultMap = new HashMap<String, Object>(2);
		// 根据警员id获取Community
		CommunityExample communityexample = new CommunityExample();
		communityexample.createCriteria().andPoliIdEqualTo(poli_id);
		resultMap.put("community",
				communityMapper.selectByExample(communityexample));
		// 根据警员id获取独立building
		BuildingExample buildingexample = new BuildingExample();
		buildingexample.createCriteria().andPoliIdEqualTo(poli_id);
		resultMap.put("building",
				buildingMapper.selectByExample(buildingexample));
		return JsonUtils.createGson().toJson(resultMap);
	}

	// 点击获取community节点获取building#
	@ResponseBody
	@RequestMapping(value = "/police/getBuildingbyCommid", method = RequestMethod.POST, produces = "text/html;charset=UTF-8")
	public String getBuildingbyCommid(@RequestParam("comm_id") Integer comm_id,
			HttpServletRequest request) {
		Map<String, Object> resultMap = new HashMap<String, Object>(2);
		BuildingExample buildingexample = new BuildingExample();
		buildingexample.createCriteria().andCommIdEqualTo(comm_id);
		resultMap.put("building",
				buildingMapper.selectByExample(buildingexample));
		return JsonUtils.createGson().toJson(resultMap);
	}

	// 根据派出所获取树#
	@ResponseBody
	@RequestMapping(value = "/police/getCommByPoliStationId", method = RequestMethod.POST, produces = "text/html;charset=UTF-8")
	public String getCommByStationId(@RequestParam("station_id") Integer station_id,HttpServletRequest request) {
		Map<String, Object> resultMap = new HashMap<String, Object>(2);
		// 根据派出所id获取Community

		resultMap.put("community", policeMapper.getCommByOffi(station_id));

		resultMap.put("building", policeMapper.getbBuilByOffi(station_id));
		return JsonUtils.createGson().toJson(resultMap);
	}

	// 根据buil_id返回单元有哪些单元
	@ResponseBody
	@RequestMapping(value = "/police/getUnitByBuilId", method = RequestMethod.POST, produces = "text/html;charset=UTF-8")
	public String getUnitByBuidid(HttpServletRequest request) {
		Map<String, Object> resultMap = new HashMap<String, Object>(2);
		resultMap.put("unit", policeMapper.getUnitByBuidid(1));
		return JsonUtils.createGson().toJson(resultMap);
	}


	// 根据buil_id返回根据单元和buil_id返回楼层
	@ResponseBody
	@RequestMapping(value = "/police/getFloorByBuididAndUnit", method = RequestMethod.POST, produces = "text/html;charset=UTF-8")
	public String getFloorByBuidid(HttpServletRequest request) {
		Map<String, Object> resultMap = new HashMap<String, Object>(2);
		// 根据buil_id获取单元数
		resultMap.put("floor", policeMapper.getFloorByBuididAndUnit(1, 1));
		return JsonUtils.createGson().toJson(resultMap);
	}

	// 根据buil_id返回根据单元，buil_id，楼层返回room
	@ResponseBody
	@RequestMapping(value = "/police/getRoomByBuididAndUnitAndFloor", method = RequestMethod.POST, produces = "text/html;charset=UTF-8")
	public String getRoomByBuididAndUnitAndFloor(HttpServletRequest request) {
		Map<String, Object> resultMap = new HashMap<String, Object>(2);
		RoomExample example = new RoomExample();
		// 根据buil_id获取单元数
		example.createCriteria().andBuilIdEqualTo(1).andRoomUnitEqualTo(1)
				.andRoomFloorEqualTo(1);
		resultMap.put("room", roomMapper.selectByExample(example));
		return JsonUtils.createGson().toJson(resultMap);
	}

	// 根据buil_id返回统计信息
	@ResponseBody
	@RequestMapping(value = "/police/getCountInfoByBuidid", method = RequestMethod.POST, produces = "text/html;charset=UTF-8")
	public String getCountInfoByBuidid(HttpServletRequest request) {
		Map<String, Object> resultMap = new HashMap<String, Object>(2);
		// 1.根据buil_id获取单元数，和房间数
		HashMap<String, Integer> roomNumAndUnitbyBuilid = policeMapper
				.getRoomNumAndUnitbyBuilid(1);
		resultMap.put("unit_number", roomNumAndUnitbyBuilid.get("unit_number"));
		Integer i = Integer.valueOf(String.valueOf(roomNumAndUnitbyBuilid
				.get("room_number")));
		resultMap.put("room_number", i);
		// 2.根据buil_id获取未巡检房间数
		resultMap
				.put("overRoom_number", policeMapper.getOverRoomNumbyBuilid(1));
		// 3.根据buil_id获取重点房间数
		RoomExample example = new RoomExample();
		example.createCriteria().andBuilIdEqualTo(1).andIsFocusEqualTo(true);
		resultMap.put("impoRoom_number", roomMapper.countByExample(example));
		// 4.根据buil_id获取总人数
		resultMap.put("person_number", policeMapper.getPersonNumbyBuilid(1));
		// 5.根据buil_id获取重点关注人数
		resultMap.put("impoPerson_number",
				policeMapper.getImpoPersonNumbyBuilid(1));
		// 6.根据buil_id获取房间各种分类数
		resultMap
				.put("roomSort_number", policeMapper.getRoomSortNumbyBuilid(1));
		// 7.根据buil_id获取自住人数/租住人数/工作人数
		resultMap.put("personSort_number",
				policeMapper.getPersSortNumbyBuilid(1));
		// 8.根据buil_id获取空房数
		Integer emptyRoomNumbyBuilid = policeMapper.getEmptyRoomNumbyBuilid(1);
		resultMap.put("emptyRoom_number", i - emptyRoomNumbyBuilid);
		return JsonUtils.createGson().toJson(resultMap);
	}

	// 根据comm_id返回统计信息
	@ResponseBody
	@RequestMapping(value = "/police/getCountInfoByCommid", method = RequestMethod.POST, produces = "text/html;charset=UTF-8")
	public String getCountInfoByCommid(HttpServletRequest request) {
		Map<String, Object> resultMap = new HashMap<String, Object>(2);
		BuildingExample buildingexample = new BuildingExample();
		buildingexample.createCriteria().andCommIdEqualTo(1);
		List<Building> selectByExample = buildingMapper
				.selectByExample(buildingexample);
		int room_number = 0;
		int unit_number = 0;
		int overRoom_number = 0;
		int impoRoom_number = 0;
		int person_number = 0;
		int impoPerson_number = 0;
		int emptyRoomNumbyBuilid = 0;

		for (Building building : selectByExample) {
			// 1.根据buil_id获取单元数，和房间数
			Integer builId = building.getBuilId();
			HashMap<String, Integer> roomNumAndUnitbyBuilid = policeMapper
					.getRoomNumAndUnitbyBuilid(builId);
			unit_number += Integer.valueOf(String
					.valueOf(roomNumAndUnitbyBuilid.get("unit_number")));
			room_number += Integer.valueOf(String
					.valueOf(roomNumAndUnitbyBuilid.get("room_number")));
			// 2.根据buil_id获取未巡检房间数
			overRoom_number += policeMapper.getOverRoomNumbyBuilid(builId);
			// 3.根据buil_id获取重点房间数
			RoomExample example = new RoomExample();
			example.createCriteria().andBuilIdEqualTo(builId)
					.andIsFocusEqualTo(true);
			impoRoom_number += roomMapper.countByExample(example);
			// 4.根据buil_id获取总人数
			person_number += policeMapper.getPersonNumbyBuilid(builId);
			// 5.根据buil_id获取重点关注人数
			impoPerson_number += policeMapper.getImpoPersonNumbyBuilid(builId);
			// 6.根据buil_id获取有人的房数
			emptyRoomNumbyBuilid += policeMapper
					.getEmptyRoomNumbyBuilid(builId);

		}
		resultMap.put("unit_number", unit_number);
		resultMap.put("room_number", room_number);
		resultMap.put("overRoom_number", overRoom_number);
		resultMap.put("impoRoom_number", impoRoom_number);
		resultMap.put("person_number", person_number);
		resultMap.put("impoPerson_number", impoPerson_number);
		// 7.计算空房数
		resultMap.put("emptyRoom_number", room_number - emptyRoomNumbyBuilid);
		// 8.根据comm_id获取房间各种分类数
		resultMap
				.put("roomSort_number", policeMapper.getRoomSortNumbyCommid(1));
		// 9.根据comm_id获取自住人数/租住人数/工作人数
		resultMap.put("personSort_number",
				policeMapper.getPersSortNumbyCommid(1));

		// 10.根据comm_id楼宇数
		resultMap.put("building_number", selectByExample.size());
		// 11.根据comm_id获取超期未巡检楼宇数
		resultMap.put("overBuilding_number",
				policeMapper.getOverBuilNumbyCommid(1));
		// 12.根据comm_id获取重点关注楼宇数
		resultMap.put("impoBuilding_number",
				policeMapper.getImpoBuilNumbyCommid(1));

		return JsonUtils.createGson().toJson(resultMap);
	}

	// 根据Poliid返回统计信息
	@ResponseBody
	@RequestMapping(value = "/police/getCountInfoByPoliid", method = RequestMethod.POST, produces = "text/html;charset=UTF-8")
	public String getCountInfoByPoliid(HttpServletRequest request) {
		Map<String, Object> resultMap = new HashMap<String, Object>(2);
		// 根据警员id获取building
		List<Building> selectByExample = policeMapper.getBuilbyPoliid(1);
		int room_number = 0;
		int unit_number = 0;
		int overRoom_number = 0;
		int impoRoom_number = 0;
		int person_number = 0;
		int impoPerson_number = 0;
		int emptyRoomNumbyBuilid = 0;

		for (Building building : selectByExample) {
			// 1.根据buil_id获取单元数，和房间数
			Integer builId = building.getBuilId();
			HashMap<String, Integer> roomNumAndUnitbyBuilid = policeMapper
					.getRoomNumAndUnitbyBuilid(builId);
			unit_number += Integer.valueOf(String
					.valueOf(roomNumAndUnitbyBuilid.get("unit_number")));
			room_number += Integer.valueOf(String
					.valueOf(roomNumAndUnitbyBuilid.get("room_number")));
			// 2.根据buil_id获取未巡检房间数
			overRoom_number += policeMapper.getOverRoomNumbyBuilid(builId);
			// 3.根据buil_id获取重点房间数
			RoomExample example = new RoomExample();
			example.createCriteria().andBuilIdEqualTo(builId)
					.andIsFocusEqualTo(true);
			impoRoom_number += roomMapper.countByExample(example);
			// 4.根据buil_id获取总人数
			person_number += policeMapper.getPersonNumbyBuilid(builId);
			// 5.根据buil_id获取重点关注人数
			impoPerson_number += policeMapper.getImpoPersonNumbyBuilid(builId);
			// 6.根据buil_id获取有人的房数
			emptyRoomNumbyBuilid += policeMapper
					.getEmptyRoomNumbyBuilid(builId);
		}
		resultMap.put("unit_number", unit_number);
		resultMap.put("room_number", room_number);
		resultMap.put("overRoom_number", overRoom_number);
		resultMap.put("impoRoom_number", impoRoom_number);
		resultMap.put("person_number", person_number);
		resultMap.put("impoPerson_number", impoPerson_number);
		// 计算得到空房数
		resultMap.put("emptyRoom_number", room_number - emptyRoomNumbyBuilid);
		// 获取所有的小区
		// 6.根据Poli_id获取房间各种分类数
		resultMap
				.put("roomSort_number", policeMapper.getRoomSortNumbyPoliid(1));
		// 7.根据Poli_id获取自住人数/租住人数/工作人数
		resultMap.put("personSort_number",
				policeMapper.getPersSortNumbyPoliid(1));
		// 9.根据Poli_id楼宇数
		resultMap.put("building_number", selectByExample.size());
		// 10.根据Poli_id获取超期未巡检楼宇数
		resultMap.put("overBuilding_number",
				policeMapper.getOverBuilNumbyPoliid(1));
		// 11.根据Poli_id获取重点关注楼宇数
		resultMap.put("impoBuilding_number",
				policeMapper.getImpoBuilNumbyPoliid(1));
		// 12.根据Poli_id获取小区数
		// 根据警员id获取Community
		CommunityExample communityexample = new CommunityExample();
		communityexample.createCriteria().andPoliIdEqualTo(1);
		resultMap.put("Comm_number",
				communityMapper.countByExample(communityexample));
		// 13.根据Poli_id获取超期未巡检小区数
		resultMap
				.put("overComm_number", policeMapper.getOverCommNumbyPoliid(1));
		// 14.根据Poli_id获取重点关注小区数；
		resultMap
				.put("impoComm_number", policeMapper.getImpoCommNumbyPoliid(1));

		return JsonUtils.createGson().toJson(resultMap);
	}

	// 根据Stat_id返回统计信息
	@ResponseBody
	@RequestMapping(value = "/police/getCountInfoByStatid", method = RequestMethod.POST, produces = "text/html;charset=UTF-8")
	public String getCountInfoByStatid(HttpServletRequest request) {
		Map<String, Object> resultMap = new HashMap<String, Object>(2);
		// 获取独立的building
		List<Building> selectByExample = policeMapper.getbBuilByOffi(1);
		// 获取独立的comm——building
		selectByExample.addAll(policeMapper.getCommBuilByOffi(1));
		int room_number = 0;
		int unit_number = 0;
		int overRoom_number = 0;
		int impoRoom_number = 0;
		int person_number = 0;
		int impoPerson_number = 0;
		int emptyRoomNumbyBuilid = 0;

		for (Building building : selectByExample) {
			// 1.根据buil_id获取单元数，和房间数
			Integer builId = building.getBuilId();
			HashMap<String, Integer> roomNumAndUnitbyBuilid = policeMapper
					.getRoomNumAndUnitbyBuilid(builId);
			unit_number += Integer.valueOf(String
					.valueOf(roomNumAndUnitbyBuilid.get("unit_number")));
			room_number += Integer.valueOf(String
					.valueOf(roomNumAndUnitbyBuilid.get("room_number")));
			// 2.根据buil_id获取未巡检房间数
			overRoom_number += policeMapper.getOverRoomNumbyBuilid(builId);
			// 3.根据buil_id获取重点房间数
			RoomExample example = new RoomExample();
			example.createCriteria().andBuilIdEqualTo(builId)
					.andIsFocusEqualTo(true);
			impoRoom_number += roomMapper.countByExample(example);
			// 4.根据buil_id获取总人数
			person_number += policeMapper.getPersonNumbyBuilid(builId);
			// 5.根据buil_id获取重点关注人数
			impoPerson_number += policeMapper.getImpoPersonNumbyBuilid(builId);
			// 6.根据buil_id获取有人的房数
			emptyRoomNumbyBuilid += policeMapper
					.getEmptyRoomNumbyBuilid(builId);
		}
		resultMap.put("unit_number", unit_number);
		resultMap.put("room_number", room_number);
		resultMap.put("overRoom_number", overRoom_number);
		resultMap.put("impoRoom_number", impoRoom_number);
		resultMap.put("person_number", person_number);
		resultMap.put("impoPerson_number", impoPerson_number);
		// 计算得到空房数
		resultMap.put("emptyRoom_number", room_number - emptyRoomNumbyBuilid);
		// 获取所有的小区

		// 6.根据stat_id获取房间各种分类数
		resultMap
				.put("roomSort_number", policeMapper.getRoomSortNumbyStatid(1));
		// 7.根据stat_id获取自住人数/租住人数/工作人数
		resultMap.put("personSort_number",
				policeMapper.getPersSortNumbyStatid(1));
		// 9.根据stat_id楼宇数
		resultMap.put("building_number", selectByExample.size());
		// 10.根据stat_id获取超期未巡检楼宇数
		resultMap.put("overBuilding_number",
				policeMapper.getOverBuilNumbyStatid(1));
		// 11.根据stat_id获取重点关注楼宇数
		resultMap.put("ImpoBuilding_number",
				policeMapper.getImpoBuilNumbyStatid(1));
		// 12.根据stat_id获取小区数
		resultMap.put("Comm_number",
				policeMapper.getCommNumbyStatid(1));
		// 13.根据stat_id获取超期未巡检小区数
		resultMap
				.put("overComm_number", policeMapper.getOverCommNumbyStatid(1));
		// 14.根据Poli_id获取重点关注小区数；
		resultMap
				.put("impoComm_number", policeMapper.getImpoCommNumbyStatid(1));
		// 15.根据Poli_id获取警员数；
		PoliceExample example =new PoliceExample();
		example.createCriteria().andStatIdEqualTo(1);
		resultMap
				.put("poil_number", policeMapper.countByExample(example));
		return JsonUtils.createGson().toJson(resultMap);
	}
	
	

}
