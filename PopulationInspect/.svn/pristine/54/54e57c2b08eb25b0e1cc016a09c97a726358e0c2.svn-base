package com.example.Http;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.example.DButil.DBMannger;
import com.example.DButil.MySqliteHelper;
import com.example.model.Task;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import android.widget.Toast;

public class GetTaskThread extends Thread{

	private String url;
	private Context context;
	
	public GetTaskThread(String url) {
		super();
		this.url = url;
	}
	
	public GetTaskThread(String url, Context context) {
		super();
		this.url = url;
		this.context = context;
	}

	//数据库
	private MySqliteHelper helper;
	
	/* 解析json数据*/
	private List<Task> parseJson(String json){
		List<Task> list = new ArrayList<Task>();
		Log.i("tag","调用解析json函数");
		
		SQLiteDatabase db = helper.getWritableDatabase();
    	String sql;
    	
    	//先清空数据库，避免重复造成冲突
		sql = "DELETE FROM task_t";
		DBMannger.execSQL(db, sql);
		
		try {
			//如果传入的字符串第一个字符为 [ 则为json数组
			if(json.charAt(0) == '['){
				Log.i("sss",json);	
				//Log.i("解析json数据函数","解析的是一个json数组");		
				JSONArray dataList = new JSONArray(json);		
				
				for(int i=0;i<dataList.length();i++){
					String data = dataList.get(i).toString();
					JSONObject object = new JSONObject(data);
					
					int taskid = Integer.parseInt(object.getString("taskId"));
					String policeId = object.getString("policeId");
					String longitude = object.getString("longitude");
					String latitude = object.getString("latitude");
					String deadLine = object.getString("deadLine");
					String community = object.getString("community");
					String room = object.getString("room");
		
					//将解析到的数据存进数据库
			    	sql = "insert into task_t values('"+taskid+"','"+policeId+"','"+longitude+"','"+latitude+"','"+deadLine+"','"+community+"','"+room+"')";
		    		DBMannger.execSQL(db, sql);

		    		
		    		//已经存进数据库了就没下面这段什么事情了，理论上不需要再返回list，改成void类型就好了
					Task u = new Task(
							Integer.parseInt(object.getString("taskId").toString()),
							object.getString("policeId"),
							Double.valueOf(object.getString("longitude")).doubleValue(),
							Double.valueOf(object.getString("latitude")).doubleValue(),
							object.getString("deadLine"),
							object.getString("community"),
							object.getString("room"));
					list.add(u);
				}

			}else{
				Log.i("解析json数据函数","解析的是一个json对象");				
			}
			return list;
			
		} catch (JSONException e) {
			Log.i("tag",e.toString());
			e.printStackTrace();
		}
		
		db.close();										//数据库操作结束后关闭数据库
		
		return null;
	}
	
	//发送get请求获取任务列表
	private void dohttpClientPost(){	
		HttpPost post = new HttpPost(url);
		HttpClient client = new DefaultHttpClient();
		
		NameValuePair info = new BasicNameValuePair("policeId", "c111111");
		
		ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();
		params.add(info);
		
		try {
			//执行请求
			post.setEntity(new UrlEncodedFormEntity(params,"UTF-8"));    
			HttpResponse response = client.execute(post);
			
			//请求响应成功时进行解析
			if(response.getStatusLine().getStatusCode()==HttpStatus.SC_OK){
				//获取response的响应体并转化成string
				String content = EntityUtils.toString(response.getEntity()); 
				
				Log.i("tag","请求成功");		
				
				//调用解析函数将响应体解析成自定义Task类型
				List<Task> data = parseJson(content);	
			}
			
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void run() {
		/**初始化数据库管理器*/
		initDBMannger(); 
		
		//发送请求
		dohttpClientPost();
	}

	//初始化数据库管理
	private void initDBMannger() {
		helper = DBMannger.getIntance(context);
		//创建数据库
		SQLiteDatabase db = helper.getWritableDatabase();
	}
}
